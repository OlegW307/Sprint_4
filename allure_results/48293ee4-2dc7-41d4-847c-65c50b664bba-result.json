{"name": "test_accordion_questions", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div id=\"accordion__heading-6\" aria-disabled=\"false\" aria-expanded=\"false\" aria-controls=\"accordion__panel-6\" role=\"button\" tabindex=\"0\" class=\"accordion__button\" data-accordion-component=\"AccordionItemButton\">...</div> is not clickable at point (738, 487). Other element would receive the click: <div class=\"App_CookieConsent__1yUIN\" style=\"align-items: baseline; background: rgb(53, 53, 53); color: white; display: flex; flex-wrap: wrap; justify-content: space-between; left: 0px; position: fixed; width: 100%; z-index: 999; bottom: 0px;\">...</div>\n  (Session info: chrome=110.0.5481.178)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x006B37D3]\n\t(No symbol) [0x00648B81]\n\t(No symbol) [0x0054B36D]\n\t(No symbol) [0x00584E3B]\n\t(No symbol) [0x005826DB]\n\t(No symbol) [0x0057FD0B]\n\t(No symbol) [0x0057E4D8]\n\t(No symbol) [0x00573253]\n\t(No symbol) [0x0059B41C]\n\t(No symbol) [0x00572B96]\n\t(No symbol) [0x0059B774]\n\t(No symbol) [0x005B1215]\n\t(No symbol) [0x0059B216]\n\t(No symbol) [0x00570D97]\n\t(No symbol) [0x0057253D]\n\tGetHandleVerifier [0x0092ABF2+2510930]\n\tGetHandleVerifier [0x00958EC1+2700065]\n\tGetHandleVerifier [0x0095C86C+2714828]\n\tGetHandleVerifier [0x00763480+645344]\n\t(No symbol) [0x00650FD2]\n\t(No symbol) [0x00656C68]\n\t(No symbol) [0x00656D4B]\n\t(No symbol) [0x00660D6B]\n\tBaseThreadInitThunk [0x76EB7D69+25]\n\tRtlInitializeExceptionChain [0x7771BB9B+107]\n\tRtlClearBits [0x7771BB1F+191]", "trace": "@allure.description('Тест на проверку открытия вопроса и печать ответа,'\n                        'ВНИМАНИЕ: тест не проходит на небольших мониторах, требуется скролинг вниз')\n    def test_accordion_questions():\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        page = MainPage(driver)\n        page.open()\n        page.scroll_to_accordion_section()\n>       page.click_all_accordion_buttons_and_print_answers()\n\ntests\\test_accordion.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\start_page.py:21: in click_all_accordion_buttons_and_print_answers\n    button.click()\nC:\\Users\\debaas\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\debaas\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\debaas\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021AC3E28340>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x76EB7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7771BB9B+107]\\\\n\\\\tRtlClearBits [0x7771BB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div id=\"accordion__heading-6\" aria-disabled=\"false\" aria-expanded=\"false\" aria-controls=\"accordion__panel-6\" role=\"button\" tabindex=\"0\" class=\"accordion__button\" data-accordion-component=\"AccordionItemButton\">...</div> is not clickable at point (738, 487). Other element would receive the click: <div class=\"App_CookieConsent__1yUIN\" style=\"align-items: baseline; background: rgb(53, 53, 53); color: white; display: flex; flex-wrap: wrap; justify-content: space-between; left: 0px; position: fixed; width: 100%; z-index: 999; bottom: 0px;\">...</div>\nE         (Session info: chrome=110.0.5481.178)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x006B37D3]\nE       \t(No symbol) [0x00648B81]\nE       \t(No symbol) [0x0054B36D]\nE       \t(No symbol) [0x00584E3B]\nE       \t(No symbol) [0x005826DB]\nE       \t(No symbol) [0x0057FD0B]\nE       \t(No symbol) [0x0057E4D8]\nE       \t(No symbol) [0x00573253]\nE       \t(No symbol) [0x0059B41C]\nE       \t(No symbol) [0x00572B96]\nE       \t(No symbol) [0x0059B774]\nE       \t(No symbol) [0x005B1215]\nE       \t(No symbol) [0x0059B216]\nE       \t(No symbol) [0x00570D97]\nE       \t(No symbol) [0x0057253D]\nE       \tGetHandleVerifier [0x0092ABF2+2510930]\nE       \tGetHandleVerifier [0x00958EC1+2700065]\nE       \tGetHandleVerifier [0x0095C86C+2714828]\nE       \tGetHandleVerifier [0x00763480+645344]\nE       \t(No symbol) [0x00650FD2]\nE       \t(No symbol) [0x00656C68]\nE       \t(No symbol) [0x00656D4B]\nE       \t(No symbol) [0x00660D6B]\nE       \tBaseThreadInitThunk [0x76EB7D69+25]\nE       \tRtlInitializeExceptionChain [0x7771BB9B+107]\nE       \tRtlClearBits [0x7771BB1F+191]\n\nC:\\Users\\debaas\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "description": "Тест на проверку открытия вопроса и печать ответа,ВНИМАНИЕ: тест не проходит на небольших мониторах, требуется скролинг вниз", "attachments": [{"name": "stdout", "source": "88be4563-4979-4c71-9011-b4047d4796b5-attachment.txt", "type": "text/plain"}], "start": 1678098585855, "stop": 1678098607414, "uuid": "418814ee-4f05-479b-8f3b-04b88dcad67b", "historyId": "dee52fba94318edb1f0a0101f7ab191d", "testCaseId": "6169285204fd011b469644d50fd68f63", "fullName": "tests.test_accordion#test_accordion_questions", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_accordion"}, {"name": "host", "value": "LAPTOP-EQOQ3AM5"}, {"name": "thread", "value": "13292-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_accordion"}]}